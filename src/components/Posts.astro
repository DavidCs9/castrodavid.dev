---
import Layout from '../layouts/Layout.astro';
import { getCollection } from 'astro:content';

// Fetch the posts collection and sort by date descending
let posts = await getCollection('posts');
posts = posts.sort(
  (a: any, b: any) => b.data.date.getTime() - a.data.date.getTime()
);

// Group posts by year for better organization
const postsByYear = posts.reduce((acc: Record<string, typeof posts>, post) => {
  const year = post.data.date.getFullYear();
  if (!acc[year]) acc[year] = [];
  acc[year].push(post);
  return acc;
}, {});

// Get years in descending order
const years = Object.keys(postsByYear).sort((a, b) => Number(b) - Number(a));
---

<div class="mt-16">
  <header class="mb-12">
    <h2 class="text-3xl font-semibold mb-6 text-gray-900">Blog</h2>
    <p class="text-xl text-gray-600">
      Thoughts, ideas, and discoveries I've shared along the way.
    </p>
  </header>

  <div class="space-y-16">
    {
      years.map(year => (
        <section>
          <h2 class="text-2xl font-bold text-gray-800 mb-6">{year}</h2>
          <ul class="space-y-6">
            {postsByYear[year].map((post: any) => (
              <li class="group">
                <a
                  href={`/posts/${post.slug}`}
                  class="block p-6 bg-white/40 rounded-lg border border-gray-100 hover:border-gray-200 hover:shadow-sm transition-all duration-200"
                >
                  <div class="flex flex-col sm:flex-row sm:justify-between sm:items-baseline gap-2">
                    <h3 class="text-xl font-medium text-gray-900 group-hover:text-primary transition-colors">
                      {post.data.title}
                    </h3>
                    <time
                      datetime={post.data.date.toISOString()}
                      class="text-sm text-gray-500 shrink-0"
                    >
                      {post.data.date.toLocaleDateString('en-US', {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric',
                      })}
                    </time>
                  </div>

                  {post.data.description && (
                    <p class="mt-3 text-gray-600 line-clamp-2">
                      {post.data.description}
                    </p>
                  )}

                  {post.data.tags && post.data.tags.length > 0 && (
                    <div class="mt-4 flex flex-wrap gap-2">
                      {post.data.tags.slice(0, 3).map((tag: string) => (
                        <span class="inline-block bg-gray-100 text-gray-700 rounded-full px-3 py-1 text-xs">
                          {tag}
                        </span>
                      ))}
                      {post.data.tags.length > 3 && (
                        <span class="inline-block text-gray-500 text-xs px-2 py-1">
                          +{post.data.tags.length - 3} more
                        </span>
                      )}
                    </div>
                  )}
                </a>
              </li>
            ))}
          </ul>
        </section>
      ))
    }
  </div>
</div>
